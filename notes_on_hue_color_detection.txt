CONCEPT NOTE:
Understanding Hue, HSV Conversion, Color Thresholding, and Masking in OpenCV
=============================================================================

1. What is Hue, and Why Does It Matter?
---------------------------------------

    - Hue represents the type of color on a circular color wheel.
    - It's measured in degrees:
        • 0°     → Red
        • 60°    → Yellow
        • 120°   → Green
        • 240°   → Blue
        • 360°   → Back to Red again

    - In OpenCV, hue is scaled from 0 to 179 (not 0 to 360).
      This is because OpenCV uses 8-bit values (0–255) and allocates
      only 180 values for hue.

    - In HSV:
        • H (Hue)     → Color type
        • S (Saturation) → Color intensity (0 = gray, 255 = vivid)
        • V (Value)     → Brightness (0 = black, 255 = full bright)

2. Why Convert from BGR to HSV?
-------------------------------

    - OpenCV captures images in BGR format by default.
    - BGR is not ideal for color detection because:
        • Brightness affects all 3 channels (B, G, R)
        • Color filtering becomes inaccurate

    - HSV is better because:
        • It separates color from intensity and brightness
        • You can easily isolate a color like red or pink using only hue range

3. How Are Lower and Upper HSV Limits Set?
------------------------------------------

    - A single color (e.g., pink) has variations due to light or saturation.
    - So we define a hue range with some tolerance:
        • lower = (hue - 10, 100, 100)
        • upper = (hue + 10, 255, 255)

    - This captures similar shades instead of just one value.

    - The values are then converted to NumPy arrays using:
        np.array(..., dtype=np.uint8)

    - Why?
        • OpenCV expects arrays of type uint8 (0–255 range)
        • Ensures compatibility with functions like cv2.inRange()

4. What is a Mask?
------------------

    - A mask is a black-and-white image used as a filter.
    - Created using cv2.inRange():
        • Pixels inside the HSV range → white (255)
        • Pixels outside the range    → black (0)

    - You can:
        • Display the mask to see where your color is detected
        • Apply it to the frame to extract only the detected color
        • Use it for drawing bounding boxes or other logic

5. Why Does cv2.imshow('frame', frame) Still Show Color?
--------------------------------------------------------

    - Even if you're detecting colors, your frame is not modified
      unless you explicitly apply the mask.

    - So cv2.imshow('frame', frame) just shows the original camera feed.

    - The mask is a separate result — it needs to be applied with
      something like cv2.bitwise_and() to affect the frame visually.

6. What Does ord('q') Do?
--------------------------

    - cv2.waitKey(1) waits for a key press for 1 ms.
    - ord('q') converts the character 'q' to its ASCII value (113).
    - So:
        if cv2.waitKey(1) == ord('q'):
            → exits the loop when 'q' is pressed.

SUMMARY:
--------

    ✓ Hue identifies the color type using the color wheel.
    ✓ HSV is better than BGR for color detection in varying light.
    ✓ We use a hue range (±10) to detect multiple shades of the same color.
    ✓ Masks highlight color locations using white pixels.
    ✓ cv2.imshow() only displays what you explicitly pass — the frame is not altered by the mask unless applied.
    ✓ ord('q') is used to check if the 'q' key was pressed to quit the loop.

